type Board implements Node {
  createdAt: ISO8601DateTime!
  id: ID!
  name: String!
  project: Project!
  updatedAt: ISO8601DateTime!
  userCreator: User!
}

type BoardColumn implements Node {
  board: Board!
  createdAt: ISO8601DateTime!
  id: ID!
  name: String!
  updatedAt: ISO8601DateTime!
  userCreator: User!
}

type BoardColumnItem implements Node {
  column: BoardColumn!
  createdAt: ISO8601DateTime!
  id: ID!
  issue: Issue
  updatedAt: ISO8601DateTime!
  userCreator: User!
}

"""
Autogenerated input type of CreateBoardColumn
"""
input CreateBoardColumnInput {
  boardId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  name: String!
  userCreatorId: ID!
}

"""
Autogenerated input type of CreateBoardColumnItem
"""
input CreateBoardColumnItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  columnId: ID!
  issueId: ID!
  userCreatorId: ID!
}

"""
Autogenerated return type of CreateBoardColumnItem
"""
type CreateBoardColumnItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  columnItem: BoardColumnItem
  errors: [String!]!
}

"""
Autogenerated return type of CreateBoardColumn
"""
type CreateBoardColumnPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  column: BoardColumn
  errors: [String!]!
}

"""
Autogenerated input type of CreateBoard
"""
input CreateBoardInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  name: String!
  projectId: ID!
  userCreatorId: ID!
}

"""
Autogenerated return type of CreateBoard
"""
type CreateBoardPayload {
  board: Board

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
}

"""
Autogenerated input type of CreateIssue
"""
input CreateIssueInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  description: String
  projectId: ID!
  summary: String!
  userCreatorId: ID!
}

"""
Autogenerated return type of CreateIssue
"""
type CreateIssuePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  issue: Issue
}

"""
Autogenerated input type of CreateOrganization
"""
input CreateOrganizationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  name: String!
  userCreatorId: ID!
}

"""
Autogenerated return type of CreateOrganization
"""
type CreateOrganizationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  organization: Organization
}

"""
Autogenerated input type of CreateProject
"""
input CreateProjectInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  isPrivate: Boolean
  name: String!
  ownerId: ID!
  ownerType: ProjectOwnerCategory!
  photoUrl: String
  userCreatorId: ID!
}

"""
Autogenerated return type of CreateProject
"""
type CreateProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  project: Project
}

"""
Autogenerated input type of CreateUser
"""
input CreateUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateUser
"""
type CreateUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  user: User
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

type Issue implements Node {
  boardColumnItems: BoardColumnItem!
  createdAt: ISO8601DateTime!
  description: String!
  id: ID!
  number: Int!
  project: Project!
  summary: String!
  updatedAt: ISO8601DateTime!
  userCreator: User!
}

type Membership implements Node {
  createdAt: ISO8601DateTime!
  id: ID!
  organization: Organization!
  updatedAt: ISO8601DateTime!
  userFrom: User!
  userTo: User!
}

type Mutation {
  """
  Create a new project board.
  """
  createBoard(input: CreateBoardInput!): CreateBoardPayload

  """
  Create a new column on a project board.
  """
  createBoardColumn(input: CreateBoardColumnInput!): CreateBoardColumnPayload

  """
  Create a new item for a column on a project board.
  """
  createBoardColumnItem(input: CreateBoardColumnItemInput!): CreateBoardColumnItemPayload

  """
  Create a new issue.
  """
  createIssue(input: CreateIssueInput!): CreateIssuePayload

  """
  Create a new organization.
  """
  createOrganization(input: CreateOrganizationInput!): CreateOrganizationPayload

  """
  Create a new project.
  """
  createProject(input: CreateProjectInput!): CreateProjectPayload

  """
  Create a new user.
  """
  createUser(input: CreateUserInput!): CreateUserPayload
}

"""
An object with an ID.
"""
interface Node {
  """
  ID of the object.
  """
  id: ID!
}

type Organization implements Node {
  createdAt: ISO8601DateTime!
  id: ID!
  memberships: [Membership!]!
  name: String!
  photoUrl: String
  projects: [Project!]!
  updatedAt: ISO8601DateTime!
  userCreator: User!
}

type Profile implements Node {
  createdAt: ISO8601DateTime!
  firstName: String!
  id: ID!
  lastName: String
  photoUrl: String
  updatedAt: ISO8601DateTime!
  user: User!
}

type Project implements Node {
  createdAt: ISO8601DateTime!
  id: ID!
  isPrivate: Boolean!
  issues: [Issue!]!
  name: String!
  owner: ProjectOwner!
  ownerType: ProjectOwnerCategory!
  photoUrl: String
  updatedAt: ISO8601DateTime!
  userCreator: User!
}

"""
An owner of a project.
"""
union ProjectOwner = Organization | User

enum ProjectOwnerCategory {
  """
  A project owned by a user account.
  """
  ACCOUNT

  """
  A project owned by an organization.
  """
  ORGANIZATION
}

type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node

  """
  Fetches a list of objects given a list of IDs.
  """
  nodes(
    """
    IDs of the objects.
    """
    ids: [ID!]!
  ): [Node]!
  users: [User!]!
}

type User implements Node {
  createdAt: ISO8601DateTime!
  id: ID!
  memberships: [Membership!]!
  profile: Profile!
  projects: [Project!]!
  updatedAt: ISO8601DateTime!
}