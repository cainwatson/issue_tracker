type Board implements Node {
  columns: [BoardColumn!]!
  createdAt: ISO8601DateTime!
  id: ID!
  name: String!
  project: Project!
  updatedAt: ISO8601DateTime!
  userCreator: User!
}

type BoardColumn implements Node {
  board: Board!
  boardPosition: Int!
  createdAt: ISO8601DateTime!
  id: ID!
  items: [BoardItem!]!
  name: String!
  updatedAt: ISO8601DateTime!
  userCreator: User!
}

type BoardItem implements Node {
  board: Board!
  column: BoardColumn
  columnPosition: Int!
  createdAt: ISO8601DateTime!
  id: ID!
  issue: Issue
  updatedAt: ISO8601DateTime!
  userCreator: User!
}

"""
Autogenerated input type of CreateBoardColumn
"""
input CreateBoardColumnInput {
  boardId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  name: String!
  userCreatorId: ID!
}

"""
Autogenerated return type of CreateBoardColumn
"""
type CreateBoardColumnPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  column: BoardColumn
  errors: [String!]
}

"""
Autogenerated input type of CreateBoard
"""
input CreateBoardInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  name: String!
  projectId: ID!
  userCreatorId: ID!
}

"""
Autogenerated input type of CreateBoardItem
"""
input CreateBoardItemInput {
  boardId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  columnId: ID
  issueId: ID
  userCreatorId: ID!
}

"""
Autogenerated return type of CreateBoardItem
"""
type CreateBoardItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  item: BoardItem
}

"""
Autogenerated return type of CreateBoard
"""
type CreateBoardPayload {
  board: Board

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
}

"""
Autogenerated input type of CreateIssue
"""
input CreateIssueInput {
  boardIds: [ID!] = []

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  description: String
  projectId: ID!
  summary: String!
  userCreatorId: ID!
}

"""
Autogenerated return type of CreateIssue
"""
type CreateIssuePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  issue: Issue
}

"""
Autogenerated input type of CreateOrganization
"""
input CreateOrganizationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  name: String!
  userCreatorId: ID!
}

"""
Autogenerated return type of CreateOrganization
"""
type CreateOrganizationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  organization: Organization
}

"""
Autogenerated input type of CreateProject
"""
input CreateProjectInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  isPrivate: Boolean = false
  name: String!
  ownerId: ID!
  ownerType: ProjectOwnerCategory!
  photoUrl: String
  userCreatorId: ID!
}

"""
Autogenerated return type of CreateProject
"""
type CreateProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  project: Project
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

"""
Autogenerated input type of InviteMember
"""
input InviteMemberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  organizationId: String!
  userFromId: ID!
  userToId: ID!
}

"""
Autogenerated return type of InviteMember
"""
type InviteMemberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  membership: Membership
}

type Issue implements Node {
  boardItems: [BoardItem!]!
  createdAt: ISO8601DateTime!
  description: String!
  id: ID!
  number: Int!
  project: Project!
  summary: String!
  updatedAt: ISO8601DateTime!
  userCreator: User!
}

type Membership implements Node {
  createdAt: ISO8601DateTime!
  id: ID!
  organization: Organization!
  updatedAt: ISO8601DateTime!
  userFrom: User!
  userTo: User!
}

"""
Autogenerated input type of MoveBoardColumn
"""
input MoveBoardColumnInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  columnId: ID!
  position: Int!
}

"""
Autogenerated return type of MoveBoardColumn
"""
type MoveBoardColumnPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  column: BoardColumn
  errors: [String!]
}

"""
Autogenerated input type of MoveBoardItem
"""
input MoveBoardItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  itemId: ID!
  position: Int!
}

"""
Autogenerated return type of MoveBoardItem
"""
type MoveBoardItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  item: BoardItem
}

type Mutation {
  """
  Create a new project board.
  """
  createBoard(input: CreateBoardInput!): CreateBoardPayload

  """
  Create a new column on a project board.
  """
  createBoardColumn(input: CreateBoardColumnInput!): CreateBoardColumnPayload

  """
  Create a new item on a project board.
  """
  createBoardItem(input: CreateBoardItemInput!): CreateBoardItemPayload

  """
  Create a new issue.
  """
  createIssue(input: CreateIssueInput!): CreateIssuePayload

  """
  Create a new organization.
  """
  createOrganization(input: CreateOrganizationInput!): CreateOrganizationPayload

  """
  Create a new project.
  """
  createProject(input: CreateProjectInput!): CreateProjectPayload

  """
  Invite a user to an organization.
  """
  inviteMember(input: InviteMemberInput!): InviteMemberPayload

  """
  Move a column on a board to a new position.
  """
  moveBoardColumn(input: MoveBoardColumnInput!): MoveBoardColumnPayload

  """
  Move an item in a column to a new position.
  """
  moveBoardItem(input: MoveBoardItemInput!): MoveBoardItemPayload

  """
  Remove a user from an organization.
  """
  removeMember(input: RemoveMemberInput!): RemoveMemberPayload

  """
  Create a new user account.
  """
  signUp(input: SignUpInput!): SignUpPayload

  """
  Create a new user.
  """
  tokenSignIn(input: TokenSignInInput!): TokenSignInPayload

  """
  Update an issue.
  """
  updateIssue(input: UpdateIssueInput!): UpdateIssuePayload

  """
  Update an organization.
  """
  updateOrganization(input: UpdateOrganizationInput!): UpdateOrganizationPayload
}

"""
An object with an ID.
"""
interface Node {
  """
  ID of the object.
  """
  id: ID!
}

type Organization implements Node {
  createdAt: ISO8601DateTime!
  id: ID!
  memberships: [Membership!]!
  name: String!
  photoUrl: String
  projects: [Project!]!
  updatedAt: ISO8601DateTime!
  userCreator: User!
}

type Profile implements Node {
  createdAt: ISO8601DateTime!
  firstName: String!
  id: ID!
  lastName: String
  photoUrl: String
  updatedAt: ISO8601DateTime!
  user: User!
}

type Project implements Node {
  boards: [Board!]!
  createdAt: ISO8601DateTime!
  id: ID!
  isPrivate: Boolean!
  issues: [Issue!]!
  name: String!
  owner: ProjectOwner!
  ownerType: ProjectOwnerCategory!
  photoUrl: String
  updatedAt: ISO8601DateTime!
  userCreator: User!
}

"""
An owner of a project.
"""
union ProjectOwner = Organization | User

enum ProjectOwnerCategory {
  """
  A project owned by a user account.
  """
  ACCOUNT

  """
  A project owned by an organization.
  """
  ORGANIZATION
}

type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node

  """
  Fetches a list of objects given a list of IDs.
  """
  nodes(
    """
    IDs of the objects.
    """
    ids: [ID!]!
  ): [Node]!
  users: [User!]!
}

"""
Autogenerated input type of RemoveMember
"""
input RemoveMemberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  organizationId: ID!
  userId: ID!
}

"""
Autogenerated return type of RemoveMember
"""
type RemoveMemberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  membership: Membership
}

"""
Autogenerated input type of SignUp
"""
input SignUpInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  firstName: String!
  lastName: String
  password: String!
  photoUrl: String
}

"""
Autogenerated return type of SignUp
"""
type SignUpPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  token: String
  user: User
}

"""
Autogenerated input type of TokenSignIn
"""
input TokenSignInInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  token: String!
}

"""
Autogenerated return type of TokenSignIn
"""
type TokenSignInPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  user: User
}

"""
Autogenerated input type of UpdateIssue
"""
input UpdateIssueInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  description: String
  issueId: ID!
  summary: String
}

"""
Autogenerated return type of UpdateIssue
"""
type UpdateIssuePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  issue: Issue
}

"""
Autogenerated input type of UpdateOrganization
"""
input UpdateOrganizationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  name: String
  organizationId: ID!
}

"""
Autogenerated return type of UpdateOrganization
"""
type UpdateOrganizationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  organization: Organization
}

type User implements Node {
  createdAt: ISO8601DateTime!
  email: String!
  id: ID!
  memberships: [Membership!]!
  profile: Profile!
  projects: [Project!]!
  updatedAt: ISO8601DateTime!
}